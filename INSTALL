Requirements:
-------------
This wrapper requires the use of PEAR SOAP. Refer to the PHP documentation for details on installing PEAR SOAP on your system.


Installation:
------------_
Copy the contents of the /src folder to your project folder.


PEAR SOAP:
----------
There is a bug in the current version of the PEAR SOAP library which requires the following edit to SOAP/Base.php beginning on line 1242.

/*
// A little more magic than should be in a qname.
$p = strpos($this->name, '[');
if ($p) {
// TODO: Need to re-examine this logic later.
// Chop off [].
$this->arraySize = explode(',', substr($this->name, $p + 1, -$p - 2));
$this->arrayInfo = substr($this->name, $p);
$this->name = substr($this->name, 0, $p);
}
*/

This TODO which needs to be re-examined later causes a bug with the Jbilling PHP library when working with complex data types (specifically object properties which are of an Array data type).


Usage:
------
Include the jBillingAPIFactory in your project using something like:

require_once( "jbilling-php-api-v1_1/src/JbillingAPIFactory.php" );

$jbilling = jbillingAPIFactory::getAPI( "http://localhost/jboss-net/services/billing?wsdl", "admin", "123qwe" );

// Instantiate each of the required JBilling objects
$UserWS = new UserWS();
$OrderWS = new OrderWS();
$ContactWS = new ContactWS();
$OrderLineWS = new OrderLineWS();
$CreditCardDTO = new CreditCardDTO();

// Define Jbilling user properties
$UserWS->setUserName( "PHP-TESTING" );
$UserWS->setPassword( "secret123" );
$UserWS->setLanguageId( 1 ); // English
$UserWS->setMainRoleId( 5 ); // Customer
$UserWS->setRole( "Customer" );
$UserWS->setStatusId( 1 ); // Active
$UserWS->setSubscriberStatusId( 1 ); // Pre-paid

// Define Jbilling contact properties
$ContactWS->setFirstName( "PHP" );
$ContactWS->setLastName( "Testing" );
$ContactWS->setPhoneNumber( "123-456-7890" );
$ContactWS->setEmail( "test@test.com" );
$ContactWS->setAddress1( "123 Anywhere St" );
$ContactWS->setCity( "Some City" );
$ContactWS->setStateProvince( "Some State" );
$ContactWS->setPostalCode( "12345" );

// Apply contact object to user contact property
$UserWS->setContact( $ContactWS );

// Define Jbilling credit card properties
$CreditCardDTO->setName( "PHP Testing" );
$CreditCardDTO->setNumber( "4012888888881881" );
$CreditCardDTO->setSecurityCode( 123 );
$CreditCardDTO->setType( 2 ); // Visa
// Define date as ISO 8601 format
$CreditCardDTO->setExpiry( date("c") );

// Add the credit card to the user credit card property
$UserWS->setCreditCard( $CreditCardDTO );

// Set Jbilling OrderLineWS properties
$OrderLineWS->setUseItem( true );
$OrderLineWS->setItemId( 1 ); // MAKE SURE THIS ITEM MATCHES AN ITEM YOUR SYSTEM!
$OrderLineWS->setTypeId( 1 ); // Item
$OrderLineWS->setQuantity( 1 );
$OrderLineWS->setDescription( "test from php api" );

// Set Jbilling purchase order properties
$OrderWS->setPeriod( 1 ); // Monthly
$OrderWS->setOrderLines( array( $OrderLineWS ) );
$OrderWS->setBillingTypeId( 1 );
$OrderWS->setCurrencyId( 1 ); // US Dollar
$OrderWS->getBillingTypeId( 1 );  // Pre-paid
$OrderWS->setUserId( 22 ); // Penny bright

// Attempt to create the new user and purcahse order
try {
      print_r( $jbilling->create( $UserWS, $OrderWS ) ); // New id's returned
      //print_r( $jbilling->createUser( $UserWS ) );  // New user id returned
      //print_r( $jbilling->createOrder( $OrderWS ) ); // New order id returned
      //print_r( $jbilling->getUserWS( 22 ) );  // User details for penny bright
}
catch( JbillingAPIException $jbex ) {

        print_r( $jbex );
}

Enjoy :)
